import {fileURLToPath} from "node:url"
import path from "node:path"
import {readFileJSON} from "@aniojs/node-fs-file"
import {getDefinedEntities} from "./getDefinedEntities.mjs"
import {generateAllEntitiesCode} from "./generateAllEntitiesCode.mjs"
import {getDefinedAPIs} from "./getDefinedAPIs.mjs"
import {generateAllAPIsCode} from "./generateAllAPIsCode.mjs"
import {generateEntityFactoryCode} from "./generateEntityFactoryCode.mjs"

const __dirname = path.dirname(fileURLToPath(import.meta.url))

let autogeneratedFiles = {}

const definedEntities = await getDefinedEntities()

autogeneratedFiles[`src/AllDefinedEntities.d.mts`] = () => {
	return generateAllEntitiesCode(definedEntities)
}

const definedAPIs = await getDefinedAPIs()

autogeneratedFiles[`src/AllDefinedAPIs.d.mts`] = () => {
	return generateAllAPIsCode(definedAPIs)
}

const userInstantiableEntities = await readFileJSON(
	path.join(__dirname, "userInstantiableEntities.json")
)

for (const entityName of userInstantiableEntities) {
	const strippedName = entityName.slice("Enkore".length)
	const factoryBaseName = `create${strippedName}`

	for (const [majorVersion, revisions] of definedEntities.get(entityName)) {
		for (const {importPath, revision} of revisions) {
			const factoryName = `${factoryBaseName}V${majorVersion}Rev${revision}`

			const code = generateEntityFactoryCode(
				factoryName,
				entityName,
				importPath,
				majorVersion,
				revision
			)

			autogeneratedFiles[`src/export/factory/${factoryName}.mts`] = () => {
				return code
			}
		}
	}
}

export default {
	realm: {
		name: "js",
		type: "package"
	},

	autogenerate: autogeneratedFiles
}
