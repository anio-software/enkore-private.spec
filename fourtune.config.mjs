import {scandir} from "@aniojs/node-fs-scandir"

async function getDefinedEntities() {
	const entities = []
	const entries = await scandir("src/entities")

	for (const entry of entries) {
		if (entry.type !== "regularFile") continue
		if (entry.parents.length !== 2) continue

		const entityName = entry.parents[0]
		const majorVersion = parseInt(entry.parents[1].slice(1))
		const revision = parseInt(entry.name.slice("rev".length, -6), 10)

		entities.push({
			name: entityName,
			majorVersion,
			revision,
			importPath: `#~${entry.path}`,
			importAliasName: `${entityName}_V${majorVersion}Rev${revision}`
		})
	}

	return entities
}

const definedEntities = await getDefinedEntities()

let autogeneratedFiles = {}

autogeneratedFiles["src/AllPossibleEntities.d.mts"] = () => {
	let code = ``

	code += `import type {EntityType} from "#~src/EntityType.d.mts"\n`

	for (const entity of definedEntities) {
		code += `import type {Definition as ${entity.importAliasName}} from "${entity.importPath}"\n`
	}

	for (const entity of definedEntities) {
		code += `type ${entity.importAliasName}EntityType = EntityType<\n`
		code += `\t"${entity.name}",\n`
		code += `\t${entity.majorVersion},\n`
		code += `\t${entity.revision},\n`
		code += `\t${entity.importAliasName}\n`
		code += `>\n`
	}

	code += `export type AllPossibleEntities = ${definedEntities.map(x => x.importAliasName + "EntityType").join(" | ")}\n`

	return code
}

for (const entity of definedEntities) {
	autogeneratedFiles[`src/export/${entity.importAliasName}.d.mts`] = () => {
		let code = ``

		code += `import type {EntityType} from "#~src/EntityType.d.mts"\n`
		code += `import type {Definition} from "${entity.importPath}"\n`

		code += `export type ${entity.importAliasName} = EntityType<\n`
		code += `\t"${entity.name}",\n`
		code += `\t${entity.majorVersion},\n`
		code += `\t${entity.revision},\n`
		code += `\tDefinition\n`
		code += `>\n`

		return code
	}
}

export default {
	realm: {
		name: "js",
		type: "package"
	},

	autogenerate: autogeneratedFiles
}
