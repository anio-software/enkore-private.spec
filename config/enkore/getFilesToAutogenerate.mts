import {defineAutogeneratedFile} from "@anio-software/enkore"
import {fileURLToPath} from "node:url"
import path from "node:path"
import {getDefinedEntities} from "./getDefinedEntities.mts"
import {getDefinedAPIs} from "./getDefinedAPIs.mts"
import {generateAllEntitiesCode} from "./generateAllEntitiesCode.mts"
import {generateAllAPIsCode} from "./generateAllAPIsCode.mts"
import {readFileJSON} from "@anio-software/pkg.node-fs"
import {generateEntityFactoryCode} from "./generateEntityFactoryCode.mts"
import {getNewestEntityVersions} from "./getNewestEntityVersions.mts"

const __dirname = path.dirname(fileURLToPath(import.meta.url))
const projectRoot = path.join(__dirname, "..", "..")

type AutogeneratedFile = ReturnType<typeof defineAutogeneratedFile>

export async function getFilesToAutogenerate(): Promise<AutogeneratedFile[]> {
	const files: AutogeneratedFile[] = []

	const definedEntities = await getDefinedEntities()
	const definedAPIs = await getDefinedAPIs()

	files.push(defineAutogeneratedFile({
		destinationPath: "project/src/AllDefinedEntities.ts",
		generator() {
			return generateAllEntitiesCode(definedEntities)
		}
	}))

	files.push(defineAutogeneratedFile({
		destinationPath: "project/src/AllDefinedAPIs.ts",
		generator() {
			return generateAllAPIsCode(definedAPIs)
		}
	}))

	const userInstantiableEntities = (await readFileJSON(
		path.join(projectRoot, "userInstantiableEntities.json")
	)) as string[]

	for (const entityName of userInstantiableEntities) {
		const strippedName = entityName.slice("Enkore".length)
		const factoryBaseName = `create${strippedName}`

		for (const [majorVersion, revisions] of definedEntities.get(entityName)!) {
			for (const {importPath, revision} of revisions) {
				const factoryName = `${factoryBaseName}V${majorVersion}Rev${revision}`

				files.push(defineAutogeneratedFile({
					destinationPath: `project/export/factory/${factoryName}.ts`,
					generator() {
						return generateEntityFactoryCode(
							factoryName,
							entityName,
							importPath,
							majorVersion,
							revision
						)
					}
				}))
			}
		}
	}

	const newestEntityVersions = getNewestEntityVersions(definedEntities)

	for (const entityName of userInstantiableEntities) {
		const strippedName = entityName.slice("Enkore".length)
		const factoryBaseName = `create${strippedName}`
		const newestEntityVersion = newestEntityVersions.get(entityName)!

		files.push(defineAutogeneratedFile({
			destinationPath: `project/export/factory/${factoryBaseName}.ts`,
			generator() {
				return generateEntityFactoryCode(
					factoryBaseName,
					entityName,
					newestEntityVersion.revision.importPath,
					newestEntityVersion.majorVersion,
					newestEntityVersion.revision.revision
				)
			}
		}))
	}

	return files
}
