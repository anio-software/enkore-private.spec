import type {
	EnkoreConfig,
	EnkoreAutogeneratedFile,
	EnkoreProjectFile,
	EnkoreNodeAPIOptions
} from "#~export/__aggregatedExports.mts"
import type {NodeAPIMessage, NodePackageJSON} from "@enkore/primitives"
import type {AllEnkoreTargets} from "#~src/AllEnkoreTargets.mts"
import type {TargetIdentifier} from "@enkore/primitives"
import type {TargetIdentifierToEntityName} from "#~src/TargetIdentifierToEntityName.mts"
import type {
	ToolchainIDs,
	Toolchains,
	ToolchainByID
} from "@enkore-types/toolchains"

type TargetOptionsMap = {
	[K in TargetIdentifier]: Extract<AllEnkoreTargets, {
		entityKind: TargetIdentifierToEntityName<K>
	}>
}

export type Definition = {
	project: {
		root: string
		config: EnkoreConfig
		packageJSON: NodePackageJSON
	}

	target: {
		getOptions: <T extends TargetIdentifier>(
			expectedTargetIdentifier: T
		) => TargetOptionsMap[T]

		_getToolchain: <ID extends ToolchainIDs>(
			expectedToolchainID: ID
		) => ToolchainByID<ID>

		__getInstalledToolchain: () => Toolchains

		getInternalData: () => object
	}

	enkore: {
		getOptions: () => EnkoreNodeAPIOptions

		getCurrentStep: () => string|undefined

		emitMessage: {
			(
				severity: NodeAPIMessage["severity"],
				message: NodeAPIMessage["message"]
			) : undefined

			(
				severity: NodeAPIMessage["severity"],
				id: NodeAPIMessage["id"],
				message: NodeAPIMessage["message"]
			) : undefined
		}

		getProjectFiles: (
			relativeBaseDir?: string|string[]|undefined
		) => EnkoreProjectFile[]

		getAllProjectFiles: (
			relativeBaseDir?: string|string[]|undefined
		) => EnkoreProjectFile[]
	}

	addAutogeneratedFile: (file: EnkoreAutogeneratedFile) => undefined
}
